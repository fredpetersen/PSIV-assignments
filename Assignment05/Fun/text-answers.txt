Search for this string to see changes: (* CHANGED FOR ASSIGNMENT 5 *)
Exercise 6.1
After running the four programs we get the following:
a: HigherFun.value = Int 7
b: HigherFun.value = Int 7
c: HigherFun.value = Int 7
d: HigherFun.value =
  Closure
    ("f", "y", Prim ("+", Var "x", Var "y"),
     [("x", Int 2);
      ("add",
       Closure
         ("add", "x", Letfun ("f", "y", Prim ("+", Var "x", Var "y"), Var "f"),
          []))])

The third one is expected since, addtwo is a partially applied function, that we call we 5 such that add is called with 2 and 5 giving 7.
Even though we define x later, this does not apply to the function as the declared env for the function hasn't changed

The result of the last is a function in our abstract syntax that cannot be computed yet, as only one argument has been applied.
As the function expects a total of 2 arguments, we cannot evaluate the function but instead we have a partially applied function.

Exercise 6.2
Exercise 6.3
Exercise 6.4
(i)
See ex_64i.jpg for a picture of the type rule tree.
We cannot deduce `f` further than the type t_x->int, meaning that for all possible types of x, f will always return the type int.
Thus x can take multiple forms making it polymorphic.

(ii)
See ex_64ii.jpg for a picture of the type rule tree.
We can deduce that `x` must be an int based on our rule tree, and that `f` will always return an int value.
Thus we have that `f` is not polymorphic but always int -> int.

Exercise 6.5 (1)
inferType (fromString "let f x = 1 in f f end");;
val it: string = "int"

inferType (fromString "let f g = g g in f end");;
System.Exception: type error: circularity

We never know the value of g because g will endlessly infer the type g: t_x -> t_r

inferType (fromString "let f x = let g y = y in g false end in f 42 end");;
val it: string = "bool"

inferType (fromString "
  let f x =
    let g y = if true then y else x
    in g false end
  in f 42 end
");;
System.Exception: type error: bool and int

We know that g(y) is called with false thus y is a bool, whereas f(x) is called with 42 and thus is an int, such that we have a type error.
We have an if/else statement that returns either x or y in the same function (g), meaning we have a function that either returns an in or a bool.

inferType (fromString "
  let f x =
    let g y = if true then y else x
    in g false end
  in f true end
");;
val it: string = "bool"

Exercise 6.5 (2)
bool -> bool:
inferType (fromString "
  let f x = if x then false else true
  in f end
");;
val it: string = "(bool -> bool)"

int -> int:
inferType (fromString "
  let f x = x+1
  in f end
");;
val it: string = "(int -> int)"

int -> int -> int:
inferType (fromString "
  let f x =
    let g y = x + y
    in g end
  in f end
");;
val it: string = "(int -> (int -> int))"

’a -> ’b -> ’a:
inferType (fromString "
  let f x =
    let g y = x
    in g end
  in f end
");;
val it: string = "('h -> ('g -> 'h))"

’a -> ’b -> ’b:
inferType (fromString "
  let f x =
    let g y = y
    in g end
  in f end
");;
val it: string = "('g -> ('h -> 'h))"

(’a -> ’b) -> (’b -> ’c) -> (’a -> ’c):
inferType (fromString "
  let f ab =
    let g bc =
      let id x = bc (ab x)
      in id end
    in g end
  in f end
");;
val it : string = "(('l -> 'k) -> (('k -> 'm) -> ('l -> 'm)))"

’a -> ’b:
inferType (fromString "
let t z =
  let f x =
    let g y =
      y
    in f g end
  in f f end
in t end
");;
val it : string = "('o -> 'p)"

’a:
inferType (fromString "
  let f x =
    let g y =
      y
    in f g end
  in f f end
");;
val it : string = "'i"